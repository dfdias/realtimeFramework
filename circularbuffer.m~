classdef circularbuffer < handle

    
    properties
        buffer  %circular buffer
        p1      %ponteiro1
        len     %number of frames
        N       %frame size
    end
    
    methods 
        function obj = circularbuffer(len,N) %constructor
            obj.p1 = 0 %write pointer| aponta para a posição de escrita
            obj.len = len
            obj.buffer = zeros(obj.N,obj.len) %initializes the frame buffer asa zero meatrix with lenx X N dimension
        end
        
       function y = appends(obj,frame)      %adds frame to buffer
%            if obj.p1 > obj.len 
%                obj.p1 = mod(obj.p1,obj.len);
%            end
           obj.buffer(:,obj.p1+1) = frame;%index offset
           obj.p1 = mod(obj.p1 +1,obj.len);   %increments the write pointer
           y = 'done';
       end
        

        function y = get(obj) %gets frames N frames
            y = 0;
            idx = obj.p1 : 1 : obj.p1+obj.len-1; %generates a vector of indexes
             %applies the module to adapt the indexes generated to the actual vector lenght and apllies a offset to avoid non positive integer error
            idx = mod(idx,obj.len)+1  
            idx = 
            for i=1 : length(idx)
                y =  [y obj.buffer(idx(i),:)] %fills the return vector with every frame in the buffer by order
            end;
            y = y(2:end) %fixes the first 0 offset
        end
    end
end